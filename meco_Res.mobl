module meco_Res


type ecod {
		ido: String
		stockid: String
		ticker: String
		utolso: String
		min: String
		max: String
		nyito: String
		elozozaro: String
		utolsomenny: String
		napiosszes: String
		forgalom: String
		veteliaj: String
		eladasiaj: String
		atlagar: String
		valtozas: String
		valtszaz: String
		vetelidbszam: String
		eladasidbszam: String
}	



entity RVd {
		ido: String
		paros: String
		stockid: String
		ticker: String
		utolso: String
		min: String
		max: String
		nyito: String
		elozozaro: String
		utolsomenny: String
		napiosszes: String
		forgalom: String
		veteliaj: String
		eladasiaj: String
//		atlagar: String
		valtozas: String
		valtszaz: String
		vetelidbszam: String
		eladasidbszam: String
}

entity Beall  {
	rrate: Num
	csaktiv: Bool
	gen_ido: String
}

entity Tickerek  {
	tickerid: String
	ticker: String
	fav: Bool
	akt: Bool
}

function ReszvenyMapper(json:JSON) : [ecod] {

	if(Beall.all().count() == 0){
		var beallitas = Beall();
		beallitas.rrate = 10;
		beallitas.csaktiv = true;
		beallitas.gen_ido = json.bet.gen_ido.toString();
		add(beallitas);
	}
	else {
		var id = Beall.all().one().id;
		var t = Beall.load(id);
//		log (t);
		t.gen_ido=json.bet.gen_ido.toString();
	}	
	return json.bet.reszveny;
}


service ecohu {
  resource rv() : [ecod] {
//	uri = "http://services.eco.hu/bb/bb_bet_rvprompt.php"	
	uri = "http://services.eco.hu/bb/meco/staticjson.json"
    encoding = "json"
	mapper = ReszvenyMapper
  }
 
  resource index() : [ecod] {
	uri = "http://services.eco.hu/bb/bb_bet_indexprompt.php"	
//	uri = "http://services.eco.hu/bb/meco/staticjson.json"
    encoding = "json"
	mapper = ReszvenyMapper
  }
}

function Beall_init(){
//	alert(Beall.all().count());
	if(Beall.all().count() == 0){
		var beallitas = Beall();
		beallitas.rrate = 10;
		beallitas.csaktiv = true;
		beallitas.gen_ido= "00:00:00";
		add(beallitas);
	}	
}

function szokozol(a: String): String {
var szam = "majom";
szam = a.toString();
var i = szam.length;
var j = 1;
var szam2 = szam.split("",100);
szam = "";

foreach(kar in szam2)   {
	kar = szam2.get(i-1);
	
	if(!Math.isNaN(parseNum(kar))) { 
		if(j !=4) {
			szam = kar + szam;
			i = i-1;
			j = j +1;
		}
		else {
			szam = " " + szam;
			szam = kar + szam;
			i = i-1;
			j = 2;
		}
	}
	else {
		szam = kar + szam;
		i = i-1;
		j =1;
	}		
}

return szam;
}	
function isfav(t: String): Bool {
	return Tickerek.findBy("ticker", t).fav;
}

function isakt(t: String): Bool {
	return Tickerek.findBy("ticker", t).akt;
}

function tol(p: ecod, paros: Bool) {
		var sor=RVd(ticker="alma");
		sor.ido=p.ido;
		sor.stockid=p.stockid.toString();
		sor.ticker=p.ticker;
		sor.utolso=szokozol(p.utolso);
		sor.min=szokozol(p.min);
		sor.max=szokozol(p.max);
		sor.nyito=szokozol(p.nyito);
		sor.elozozaro=szokozol(p.elozozaro);
		sor.utolsomenny=szokozol(p.utolsomenny);
		sor.napiosszes=szokozol(p.napiosszes);
		sor.forgalom=szokozol(p.forgalom);
		sor.veteliaj=szokozol(p.veteliaj);
		sor.eladasiaj=szokozol(p.eladasiaj);
//		sor.atlagar=szokozol(p.atlagar);
		sor.valtozas=szokozol(p.valtozas);
		sor.valtszaz=szokozol(p.valtszaz);
		sor.vetelidbszam=szokozol(p.vetelidbszam);
		sor.eladasidbszam=szokozol(p.eladasidbszam);
		if (paros) {sor.paros="1";}
		else {sor.paros="0";}
		add(sor);
		
}

function tolt(csakfav: Bool, csakakt: Bool): String {
//	var indexek = ecohu.index();
	var adatok = ecohu.rv();
	var paros = false;
	RVd.all().destroyAll();
	var tickersor = Tickerek(tickerid=0);
	
	
	
	 foreach(papir in adatok) {	
// ha nem volt benne a ticker táblában, akkor berakjuk
		var t = Tickerek.findBy("ticker", papir.ticker); 	
		if( t == null) {
			tickersor.tickerid = papir.stockid.toString();
			tickersor.ticker = papir.ticker;
			tickersor.fav = false;
			tickersor.akt = (papir.ido!="00:00:00");
			add(tickersor);
			tickersor = Tickerek(tickerid=0);
		}
		else { t.akt = (papir.ido!="00:00:00");
		}		
//ha kell, betoljuk a db a részvény adatokat		
		var f = isfav(papir.ticker);
		var a = isakt(papir.ticker);
		if(a && csakakt && f && csakfav) {tol(papir, paros); paros=!paros; }
		if(a && csakakt && f && (!csakfav)) {tol(papir, paros); paros=!paros; }
		if(a && csakakt && (!f) && (!csakfav)) {tol(papir, paros); paros=!paros; }
		if(a && (!csakakt) && f && csakfav) {tol(papir, paros); paros=!paros; }
		if(a && (!csakakt) && f && (!csakfav)) {tol(papir, paros); paros=!paros; }
		if(a && (!csakakt) && (!f) && (!csakfav)) {tol(papir, paros); paros=!paros;}
		if((!a) && (!csakakt) && f && csakfav) {tol(papir, paros); paros=!paros;}
		if((!a) && (!csakakt) && f && (!csakfav)) {tol(papir, paros); paros=!paros; }
		if((!a) && (!csakakt) && (!f) && (!csakfav)) {tol(papir, paros); paros=!paros; }
	}
	return Beall.all().one().gen_ido;
//	return null;
}






//tickertolt();
//sleep(1000);
//Beall_init();
//tolt();






//repeat(Beallitasok.all().one().rrate*1000, {
//	alert(Beallitasok.all().one().rrate);
//});
